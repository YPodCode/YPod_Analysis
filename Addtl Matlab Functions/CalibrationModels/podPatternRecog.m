function func = podPatternRecog(a)
%% Uses the settings and code from the Classification learner app on a kNN model
switch a
    case 1; func = @podPatternRecogGen;
    case 2; func = @podPatternRecogApply;
    case 3; func = @podPatternRecogReport;
end

end

%%-------------------------------------------------------------------------

%%-------------------------------------------------------------------------
function mdlstruct= podPatternRecogGen(Y,X,~)
%% Make the data match what is expected
nninputmat = table2array(X);

Y = table2array(Y);
cats = categories(Y);
Y = grp2idx(Y);
nntargetmat = zeros(size(Y,1),max(Y));
for i = 1:max(Y)
    nntargetmat(Y==i,i) = 1;
end

%% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 06-Sep-2018 13:22:45
%
x = nninputmat';
t = nntargetmat';

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network with a variable number of neurons
hiddenLayerSize = min([size(X,2)*2 20]); %Cap the number of neurons at 20 to avoid overfitting
net = patternnet(hiddenLayerSize, trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};
net.output.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivide
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 75/100;
net.divideParam.valRatio = 5/100;
net.divideParam.testRatio = 20/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'crossentropy';  % Cross-Entropy

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotconfusion', 'plotroc'};

% Train the Network
rng(7)
[net,tr] = train(net,x,t);

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y);
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y);
valPerformance = perform(net,valTargets,y);
testPerformance = perform(net,testTargets,y);



%% Items to return
% [~, maxind] = max(y,[],1);
% 
% y_hat = categorical(maxind,1:length(cats),cats)';

mdlstruct = {net, cats};

end

%%-------------------------------------------------------------------------

%%-------------------------------------------------------------------------
function y_hat = podPatternRecogApply(X,mdlstruct,~)

net = mdlstruct{1};
cats = mdlstruct{2};

nninputmat = table2array(X);
x = nninputmat';

%Make predictions on new data
y = net(x);

[~, maxind] = max(y,[],1);

y_hat = categorical(maxind,1:length(cats),cats)';

end
%%-------------------------------------------------------------------------

%%-------------------------------------------------------------------------
function podPatternRecogReport(mdlstruct,~)
try
    net = mdlstruct{1};
    view(net)
catch err
    disp('Error reporting the kNN Classification model');
end

end
